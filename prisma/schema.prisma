generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    email String? @unique

    password    String
    role        Role
    fileUrl     String?
    userProfile UserProfile?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Recruiter {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    email String? @unique

    password  String
    role      Role
    job       Job[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    candidate
    recruiter
}

model Job {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title        String?
    company      String?
    type         String?
    location     String?
    salary       String?
    description  String?
    requirements String?
    skills       String[]
    applicants   String[] @default([])

    recruiterId String    @unique
    recruiter   Recruiter @relation(fields: [recruiterId], references: [email])

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    UserProfile UserProfile[]
}

model UserProfile {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userEmail], references: [email])
    userEmail String   @unique
    name      String
    title     String?
    email     String?
    phone     String?
    location  String?
    summary   String?
    applied   String[] @default([])

    skills     String[]     @default([])
    experience Experience[]
    education  Education[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Job       Job?     @relation(fields: [jobId], references: [id])
    jobId     String?  @db.ObjectId
}

model Experience {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title       String?
    company     String?
    location    String?
    startDate   String?
    endDate     String?
    description String?

    userProfileId String      @db.ObjectId
    userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

    createdAt DateTime @default(now())
}

model Education {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    degree         String?
    institution    String?
    location       String?
    graduationDate String?

    userProfileId String      @db.ObjectId
    userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

    createdAt DateTime @default(now())
}
